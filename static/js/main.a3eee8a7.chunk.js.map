{"version":3,"sources":["redux/contacts/actions.js","redux/contacts/reducer.js","redux/store.js","redux/contacts/operations.js","components/ContactsForm/ContactsForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App/App.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","contacts","createReducer","_","payload","state","filter","id","loading","combineReducers","store","configureStore","reducer","contactsReducer","axios","defaults","baseURL","ContactsForm","dispatch","useDispatch","useSelector","console","log","useState","name","setName","number","setNumber","handleChange","e","target","value","currentTarget","onAddContact","contact","post","then","data","catch","error","addContact","alreadyExistsContact","some","toLowerCase","reset","onSubmit","preventDefault","alert","htmlFor","type","onChange","pattern","title","required","onClick","ContactList","onDeleteContact","contactId","delete","finishFilterContacts","includes","filteredContacts","map","prototype","PropTypes","string","isRequired","handleDeleteContact","func","array","Filter","defaultProps","onChangeFilter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3eee8a7.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\n//FETCH - 3 экшна, чтоб забрать\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\n//ADD CONTACT\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n//DELETE CONTACT\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const filterContacts = createAction('contacts/FilterContact');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactSuccess,\n  addContactError,\n  addContactRequest,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContacts,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './actions';\n\n// const localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\n\nconst contacts = createReducer(\n  // localStorageContacts ??\n  [\n    // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ],\n  {\n    [fetchContactSuccess]: (_, { payload }) => payload,\n    [addContactSuccess]: (state, { payload }) => {\n      const inContacts = [payload, ...state];\n      // localStorage.setItem('contacts', JSON.stringify(inContacts));\n      return inContacts;\n    },\n\n    [deleteContactSuccess]: (state, { payload }) => {\n      const removedFromContacts = state.filter(({ id }) => id !== payload);\n      // localStorage.setItem('contacts', JSON.stringify(removedFromContacts));\n      return removedFromContacts;\n    },\n  },\n);\n\nconst filter = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\nexport default combineReducers({ contacts, filter, loading });\n","// import { createStore, applyMiddleware } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/reducer';\n\n// const store = createStore(\n//   reducer,\n//   composeWithDevTools(),\n// applyMiddleware([])\n// other store enhancers if any\n// );\nconst store = configureStore({ reducer: contactsReducer });\n// const store = configureStore({\n//   reducer: {\n//     contacts: contactsReducer,\n//   },\n\nexport default store;\n","import { createAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './actions';\n\naxios.defaults.baseURL = 'http://localhost:3030';\n\nconst fetchContact = () => dispatch => {\n  dispatch(fetchContactRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\n    .catch(error => dispatch(fetchContactError(error)));\n};\n\nconst addContact = (name, number) => dispatch => {\n  const contact = {\n    name,\n    number,\n    //completed: false,\n  };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = contactId => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactSuccess(contactId)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\n// const deleteContact = createAction('contacts/DeleteContact');\n// const filterContacts = createAction('contacts/FilterContact');\n\nexport { addContact, deleteContact, fetchContact };\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations';\n\nfunction ContactsForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n  console.log('#####FORMcontacts', contacts);\n  //const contacts = useSelector(state => state.сontactsReduscer);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n\n    console.log('VALUE:', e.currentTarget);\n    console.log('NAME:', [name]);\n  };\n\n  const onAddContact = (name, number) => {\n    dispatch(addContact(name, number));\n  };\n\n  const alreadyExistsContact = contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase(),\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (alreadyExistsContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    onAddContact(name, number);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form\n        onSubmit={handleSubmit}\n        //   onSubmit={(e) => {\n        //     e.preventDefault();\n        //     console.log(e.currentTarget);\n        //   }}\n      >\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            id={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            id={number}\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button\n          onClick={() => {\n            console.log('add contakt');\n          }}\n          type=\"submit\"\n        >\n          add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactsForm;\n\n/////////CLASS///////////////////////////////////////////////////////\n// import React, { Component } from 'react';\n\n// class ContactsForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//     // console.log(\"VALUE:\", e.currentTarget);\n//     // console.log(\"NAME:\", [name]);\n//   };\n\n//   handleSubmit = e => {\n//     const { name, number } = this.state;\n//     e.preventDefault();\n//     this.props.onSubmit(name, number);\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <form\n//           onSubmit={this.handleSubmit}\n//           //   onSubmit={(e) => {\n//           //     e.preventDefault();\n//           //     console.log(e.currentTarget);\n//           //   }}\n//         >\n//           <label>\n//             Name\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={this.state.name}\n//               onChange={this.handleChange}\n//               id={this.state.name}\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//               required\n//             />\n//           </label>\n//           <label>\n//             Number\n//             <input\n//               type=\"tel\"\n//               name=\"number\"\n//               value={this.state.number}\n//               onChange={this.handleChange}\n//               id={this.state.number}\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//               required\n//             />\n//           </label>\n//           <button\n//             onClick={() => {\n//               console.log('add contakt');\n//             }}\n//             type=\"submit\"\n//           >\n//             add contact\n//           </button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ContactsForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { connect } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContact, deleteContact } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n  console.log('!!!!!CONTACTS', contacts);\n  const filter = useSelector(state => state.filter);\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  //useEffect(() => dispatch(fetchContact()), [dispatch]);\n\n  const filteredContacts = (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n\n  const finishFilterContacts = filteredContacts(contacts, filter);\n  //console.log('ОТФИЛЬТРОВАННЫЕ КОНТАКТЫ', finishFilterContacts);\n  return (\n    <ul>\n      {finishFilterContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>{name}</p>\n          <p>{number}</p>\n          <button type=\"button\" onClick={() => onDeleteContact(id)}>\n            delete contact\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  handleDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\nexport default ContactList;\n// const mapDispatchToProps = dispatch => ({\n//   fetchContactsBD: () => dispatch(fetchContact),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactList);\n","import { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { connect } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const findContact = name => {\n    dispatch(filterContacts(name.toLowerCase()));\n  };\n\n  const onChangeFilter = e => {\n    findContact(e.target.value);\n  };\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.prototype = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Fragment } from 'react';\n//import { useDispatch } from 'react-redux';\n//import { useEffect } from 'react';\n//import { fetchContact, deleteContact } from 'redux/contacts/operations';\nimport './App.css';\n\nimport ContactsForm from 'components/ContactsForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nfunction App() {\n  // const dispatch = useDispatch();\n  // useEffect(() => dispatch(fetchContact()), [dispatch]);\n  return (\n    <Fragment>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n\n        <ContactList />\n      </div>\n    </Fragment>\n  );\n}\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.contacts.itemsValue,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     handleSubmit: () => dispatch(actions.addContact()),\n//     handleRemoveContact: () => dispatch(actions.deleteContact()),\n//     //onChangeFilter: () => dispatch(),\n//     onFilterName: () => dispatch(actions.filterContact()),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\nexport default App;\n","import store from './redux/store';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconsole.log('store', store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}